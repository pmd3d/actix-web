name: CI (post-merge)

on:
  push:
    branches: [master]

permissions:
  contents: read # to fetch code (actions/checkout)

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_and_test_nightly:
    strategy:
      fail-fast: false
      matrix:
        target:
          - { name: Linux, os: ubuntu-latest, triple: x86_64-unknown-linux-gnu }
          - { name: macOS, os: macos-latest, triple: x86_64-apple-darwin }
          - { name: Windows, os: windows-2022, triple: x86_64-pc-windows-msvc }
        version:
          - nightly

    name: ${{ matrix.target.name }} / ${{ matrix.version }}
    runs-on: ${{ matrix.target.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Install OpenSSL
        if: matrix.target.os == 'windows-latest'
        run: choco install openssl -y --forcex64 --no-progress
      - name: Set OpenSSL dir in env
        if: matrix.target.os == 'windows-latest'
        run: |
          echo 'OPENSSL_DIR=C:\Program Files\OpenSSL-Win64' | Out-File -FilePath $env:GITHUB_ENV -Append
          echo 'OPENSSL_DIR=C:\Program Files\OpenSSL' | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install Rust (${{ matrix.version }})
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.version }}

      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack

      - name: check minimal
        run: cargo ci-check-min

      - name: check default
        run: cargo ci-check-default

      - name: tests
        timeout-minutes: 60
        run: |
          cargo test --lib --tests -p=actix-router --all-features
          cargo test --lib --tests -p=actix-http --all-features
          cargo test --lib --tests -p=actix-web --features=rustls,openssl -- --skip=test_reading_deflate_encoding_large_random_rustls
          cargo test --lib --tests -p=actix-web-codegen --all-features
          cargo test --lib --tests -p=awc --all-features
          cargo test --lib --tests -p=actix-http-test --all-features
          cargo test --lib --tests -p=actix-test --all-features
          cargo test --lib --tests -p=actix-files
          cargo test --lib --tests -p=actix-multipart --all-features
          cargo test --lib --tests -p=actix-web-actors --all-features

      - name: Clear the cargo caches
        run: |
          cargo install cargo-cache --version 0.8.3 --no-default-features --features ci-autoclean
          cargo-cache

  ci_feature_powerset_check:
    name: Verify Feature Combinations
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack

      - name: check feature combinations
        run: cargo ci-check-all-feature-powerset

      - name: check feature combinations
        run: cargo ci-check-all-feature-powerset-linux

  nextest:
    name: nextest
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install nextest
        uses: taiki-e/install-action@nextest

      - name: Test with cargo-nextest
        run: cargo nextest run
